// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jwt.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.DataValidationRuntimeException;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.auth0.jwt.JWT;
import com.auth0.jwt.exceptions.JWTDecodeException;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import jwt.proxies.constants.Constants;
import jwt.helpers.DecodedJWTParser;

/**
 * Decodes a JWT string into a JWT object. Throws an exception when the token could not be decoded.
 */
public class DecodeJWT extends CustomJavaAction<IMendixObject>
{
	private java.lang.String token;

	public DecodeJWT(IContext context, java.lang.String token)
	{
		super(context);
		this.token = token;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		ILogNode logger = Core.getLogger(Constants.getLOGNODE());
		
		if (this.token == null || this.token.equals("")) {
			logger.error("Cannot decode an empty token.");
			throw new DataValidationRuntimeException("Cannot decode an empty token.");
		}
		
		try {
			DecodedJWT jwt = JWT.decode(token);
			return new DecodedJWTParser()
			.parse(this.context(), logger, jwt)
			.getMendixObject();
		} catch (JWTDecodeException exception){
			throw exception;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DecodeJWT";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
